generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                String              @id @unique @default(uuid())
  email             String
  name              String
  password          String
  isActive          Boolean             @default(false)
  trivia            UsersOnTrivia[]
  answers           Answer[]
  profile              Profile           @relation(fields: [profileId],references: [id])
  profileId            String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
}
model Profile {
  id                String              @id @unique @default(uuid())
  name              String
  type              ProfileType                @default(PLAYER)
  users             User[]
  permissions       Permissions[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
}

model Question {
  id                String              @id @unique @default(uuid())
  title             String
  score             QuestionLevel       @relation(fields: [questionLevelId],references: [id])
  questionLevelId   String
  options           Option[]
  trivia            QuestionOnTrivia[]
  answers           Answer[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
}
model QuestionLevel {
  id                String              @id @unique @default(uuid())
  difficulty        Difficulty          @unique @default(MEDIUM)
  score             Int
  questions         Question[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
}
model Option {
  id                String              @id @unique @default(uuid())
  title             String
  question          Question            @relation(fields: [questionId],references: [id])
  questionId        String
  valid             Boolean             @default(false)
  answers           Answer[]
}

model Trivia {
  id                String              @id @unique @default(uuid())
  name              String
  description       String?
  questions         QuestionOnTrivia[]
  users             UsersOnTrivia[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
}

model QuestionOnTrivia{
  question        Question               @relation(fields: [questionId], references: [id])
  questionId      String
  trivia          Trivia                 @relation(fields: [triviaId],references: [id])
  triviaId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
  @@id([questionId, triviaId])

}

model UsersOnTrivia {
  user            User                @relation(fields: [userId], references: [id])
  userId          String
  trivia          Trivia              @relation(fields: [triviaId],references: [id])
  triviaId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
  @@id([userId, triviaId])
}

model Answer {
  id                String              @id @unique @default(uuid())
  user              User                @relation(fields: [userId],references: [id])
  userId            String
  question          Question            @relation(fields: [questionId],references: [id])
  questionId        String
  option            Option              @relation(fields: [optionId],references: [id])
  optionId          String
  valid             Boolean
  score             Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?            @default(now())
  deletedAt         DateTime?
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProfileType {
  ADMIN
  PLAYER
}

enum Permissions {
  GET_TRIVIA
  LIST_TRIVIA
  CREATE_TRIVIA
  DELETE_TRIVIA
  GET_QUESTION
  LIST_QUESTIONS
  CREATE_QUESTION
  DELETE_QUESTION
  ASSIGN_USER_TRIVIA
  CREATE_USER
  LIST_USERS
  GET_TRIVIA_RANKING
  GET_TRIVIA_SCORE
  ANSWER_TRIVIA
}